---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
  namespace: ted-namespace
data:
  CLUSTER_NAME: "ted-cluster"
  NODE_NAME: ""
  NODE_MASTER: "true"
  NODE_DATA: "true"
  NODE_DATA: "true"
  NODE_INGEST: "true"
  HTTP_ENABLE: "true"
  NETWORK_HOST: "_site_"
  NUMBER_OF_MASTERS: "1"
  MAX_LOCAL_STORAGE_NODES: "1"
  MEMORY_LOCK: "true"
  REPO_LOCATIONS: "/mnt/log"
  CLUSTER_INITIAL_MASTER_NODES: ""
  DISCOVERY_SEED_HOSTS: ""
  ES_JAVA_OPTS: "-Xms1g -Xmx1g"
  
  ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: ted-namespace
  labels:
    app: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      initContainers:
        - name: init-sysctl
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          securityContext:
            privileged: true
            capabilities:
              add:
                - IPC_LOCK
                - SYS_RESOURCE
          image: tedjung/elasticsearch7.3.1           # image by tedjung
          imagePullPolicy: Always
          ports:
          - containerPort: 9200
            name: http
            protocol: TCP
          - containerPort: 9300
            name: transport
            protocol: TCP
          envFrom:
          - configMapRef:
              name: elasticsearch-config


---
  apiVersion: "v1"
  kind: Secret
  metadata:
    name: kibana-secret
    namespace: ted-namespace
  type: Opaque
  data:
    elastic.crt: "QmFnIEF0dHJpYnV0ZXMNCiAgICBmcmllbmRseU5hbWU6IGluc3RhbmNlDQogICAgbG9jYWxLZXlJRDogNTQgNjkgNkQgNjUgMjAgMzEgMzUgMzUgMzYgMzAgMzggMzUgMzggMzIgMzcgMzkgMzEgMzQNCnN1YmplY3Q9L0NOPWluc3RhbmNlDQppc3N1ZXI9L0NOPUVsYXN0aWMgQ2VydGlmaWNhdGUgVG9vbCBBdXRvZ2VuZXJhdGVkIENBDQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURJekNDQWd1Z0F3SUJBZ0lWQUtXNnFGNFFGNTROWitacldZV3MrSlc2dVdsNE1BMEdDU3FHU0liM0RRRUINCkN3VUFNRFF4TWpBd0JnTlZCQU1US1VWc1lYTjBhV01nUTJWeWRHbG1hV05oZEdVZ1ZHOXZiQ0JCZFhSdloyVnUNClpYSmhkR1ZrSUVOQk1CNFhEVEU1TURReU5EQTJNRE0wTmxvWERUSXlNRFF5TXpBMk1ETTBObG93RXpFUk1BOEcNCkExVUVBeE1JYVc1emRHRnVZMlV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ08NCmVSR1lzQWErRkpWeGI3SkYrd2ZJVUdYZ21zTTFWTWNhWDg4b1AzRmUxMHAvUXJmb2svZzl4WTdwczlCaGlVZ0INCkU3KzQvSFBmdDlGdDRwYmZhVkpheWw5cHkyUktwLzdBbDVlenp3by9yS1NQR1JIUTV1MW9pYTlPUmU3SXVYUkoNClZyUEVpdDhlb255ZmpvZmR5bjFYQ3NkOTFHRGRKc1lQaUl2Q0ZaUTEvZVc0S1RHVWdFYWxtbmlKaUw4WTVtd1oNClMxQkJlWXByNm5adU1qMkdwN3hkcmMvZ3BCU21mVUl2cUtLenNZU2ZVajlmcWlMMnp6dC9PMk1kUUR2cWpPWVINCkZ3RWZVY0w2ejU3azJLTHBtbzNrUVhVNmZYelNDVnYyTCtubjRyTTRvMW1iazFMY3dDaCtmWmdzMlB6eXRvbjQNCmMvMEMrVTlxald0U1dNRWw2QUx4QWdNQkFBR2pUVEJMTUIwR0ExVWREZ1FXQkJRbkZTUDZkTzZjcGI0Wm9xUWMNCjdPTDlqWVZqU3pBZkJnTlZIU01FR0RBV2dCUzd4bnhQVEt0VGtwNDNKdW01Z1VyNXpqeWV4VEFKQmdOVkhSTUUNCkFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFtUjlLWEczNG9ESVp2aUZ5aTBTYWh4c3NEK0JXaUZJRmUNClVuaGxiKzk1dFh5WWRZaU9aaFM1QVFOVVgwVE40ZkZaWkw1WmFpeGxzWHdLeit2ZHdiK0NkWVVkazQvSFBCdW4NClFxeW9keXRmQ2hvRU5HdWVxK09NQjZHeW9KZHN5SURmWjRvK0tMRFFvSE4zMWNFNTBDNUdYU1JzekorVXJJNHkNCnV0bnlKUlNSbTJrMGMzb3BoVkRBRW05MEhuRlhucm9PZ0E1WlViWDFtendTTnByR3lNeVhmbVphRnIwaytaZGENCmptZktQZTExVG9YK1IwNE9vdG1UOUFxa2pSR3ZPQ0gvbWlPdmF4eVdjS2xTQnhxNmU0WjA1NzZibG11RmxLZ3INCnFNbVhoR0t2NDYvM3RCaVJjMXhIZXpma0RaSnRHY3VKOCtNQWtCVUZLbHVDNno3VlJtRTENCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
    elastic.key: "QmFnIEF0dHJpYnV0ZXMNCiAgICBmcmllbmRseU5hbWU6IGluc3RhbmNlDQogICAgbG9jYWxLZXlJRDogNTQgNjkgNkQgNjUgMjAgMzEgMzUgMzUgMzYgMzAgMzggMzUgMzggMzIgMzcgMzkgMzEgMzQNCktleSBBdHRyaWJ1dGVzOiA8Tm8gQXR0cmlidXRlcz4NCi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLQ0KTUlJRXZnSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2d3Z2dTa0FnRUFBb0lCQVFDT2VSR1lzQWErRkpWeA0KYjdKRit3ZklVR1hnbXNNMVZNY2FYODhvUDNGZTEwcC9RcmZvay9nOXhZN3BzOUJoaVVnQkU3KzQvSFBmdDlGdA0KNHBiZmFWSmF5bDlweTJSS3AvN0FsNWV6endvL3JLU1BHUkhRNXUxb2lhOU9SZTdJdVhSSlZyUEVpdDhlb255Zg0Kam9mZHluMVhDc2Q5MUdEZEpzWVBpSXZDRlpRMS9lVzRLVEdVZ0VhbG1uaUppTDhZNW13WlMxQkJlWXByNm5adQ0KTWoyR3A3eGRyYy9ncEJTbWZVSXZxS0t6c1lTZlVqOWZxaUwyenp0L08yTWRRRHZxak9ZUkZ3RWZVY0w2ejU3aw0KMktMcG1vM2tRWFU2Zlh6U0NWdjJMK25uNHJNNG8xbWJrMUxjd0NoK2ZaZ3MyUHp5dG9uNGMvMEMrVTlxald0Uw0KV01FbDZBTHhBZ01CQUFFQ2dnRUFDa3pTYXRsL0EwcjFxdWZLV2FqV1hUTUN5b1FsekxzK1ViZlBnRGRsK05kVA0KdVhPWFhDY21jVURSSGpBenhubG9UVHVpUnJ0cG5TanE2U2pTZzRCWHhkeVBuVlJwQWNTM2RERUJkS3hwTDBWSg0KK0ZaMXBVYXNyendWQW5HbjI3Y2NveGl6a21mL3pYVXQwVk02bTF4Q1I0S3QvWGpYTCtYWHQ5UEZWdGk4aUZLZw0KWGRHUGlIV1pZZkM2S3M0WUNvMnZTVmRzUUZoYlRHYlpybWJYZCt3d1IrMUZON3pZYXV4VUxXT3NWWE9aVHBEQg0KY05qZUI3TVp3cDYrRTNFLzJsdjNya3V6eVdKYkZGR0s2MmE2c05aZHZYU3RZMkpzbG5FTmFtN1RBcEp4ZGdrSg0KN0pBSVF5cHFyM3p4Um9xQ1ByNkRZQ3FIZWZKYUs0S2dXME9JdnVCQzRRS0JnUUR5SDM2cW1Da2YrVzlyaGo1NQ0KckwzZm92OWxlZVBYWVNvcXRpZVNrZGpIVDhadUVIVzVjZ3JJQUd3Z0Y4ZThVM3ZkNG1nNFE2aXJBN2VQd1FPVA0KS1Y3emZ1NmkwTVdHOHZ4NkkyVjNjUXJmOFo4M3lFRE1ncTY3aUZmdHFNRDdFWGpKa0RneWRCRTQyT2hPY0x2MQ0KWXdIU3pSMGtGN3lnbkZNL3hrSkxjcWZZalFLQmdRQ1dvM252S0NjU1liVUtjZExzcXhESW1QSS9UQWxZY2RXdw0KQ3BLNXVEUXpabTVsK1NJakJsOUtiNlpSZk9jbDNwVTRBOGRUbVF2bThwS1hzeWZYV2NYOVFVQ1I1dWgrcXk1Lw0KWG52UFVTdGR4bW5rMU9pQ2NkaHJTa2MyTTJIb0cxeEdDd2k5Q09jK3BVZHhHUE5pRE0waGt2bnUxSEh6aW0zVQ0KeDJ1QklmWFU5UUtCZ1FEaXJ4WDZSZ2VLeGcvSkRhQ0ViblErWXU3V1pPNHFBZkJtbUxBb0M2QjN5bnF2SlgzeQ0KcDVEc2UyakFDME9YVUZvUi9SMHlRRFkwRm9EUGVCZ091WmNLUmZiS1BNZ1Nkb0JuSWFpbjBSQXJacDU0cldYdA0Ka3hSZ3cxLy9SQldaZWx3cDZucVMwaFFsc3Y2Y0lmUDM1RUFheXFyVDFkMW1TYld2YWNFN3ZoYmpLUUtCZ0M0Yg0KTFNnSkZ5Um1LWDVmNWxvdjVid3dLLzA1cmFhWGVQc2YwVmJzelhWcUJhSktoYXRJdVFQVWRvaDhmVmMyOEY4cg0Kc09laWNXVW5tN3k0eGhvQXpUdTlyQ0M4Rnk4bC85NVdNZmo3ZEJXSXRFS284OTF4TVBkdHphd0dRQkpGeFpGZQ0Kc1RjQ3NaeVlBK3pXNFMrQ2tZcVVMTkZ2enN6bThzVHNvTGZ1aUFxOUFvR0JBTDRzTnNFbVZRRmkvK1pvSHpWYg0KNnhLenNCd3JneXlpa21xMzV6clpNb0NDRUlNSHRDbFV6dzgrRitnOFN0Qi9vK3psWFVkQm56K0J4YjhMeWhrRQ0KVlExUUFYdXlDM0ZuN29Nb2JyUUxmcllHLzg5OThJbEswcm1DeXp6b28xSzg0QjJCOXNRaDdHbXdlOUkvUlo4NA0KNWNlb2Zad2tuN1UvMjhaaElUQnJGSDFzDQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t"
    elastic.pem: "QmFnIEF0dHJpYnV0ZXMNCiAgICBmcmllbmRseU5hbWU6IGluc3RhbmNlDQogICAgbG9jYWxLZXlJRDogNTQgNjkgNkQgNjUgMjAgMzEgMzUgMzUgMzYgMzAgMzggMzUgMzggMzIgMzcgMzkgMzEgMzQNCktleSBBdHRyaWJ1dGVzOiA8Tm8gQXR0cmlidXRlcz4NCi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLQ0KTUlJRXZnSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2d3Z2dTa0FnRUFBb0lCQVFDT2VSR1lzQWErRkpWeA0KYjdKRit3ZklVR1hnbXNNMVZNY2FYODhvUDNGZTEwcC9RcmZvay9nOXhZN3BzOUJoaVVnQkU3KzQvSFBmdDlGdA0KNHBiZmFWSmF5bDlweTJSS3AvN0FsNWV6endvL3JLU1BHUkhRNXUxb2lhOU9SZTdJdVhSSlZyUEVpdDhlb255Zg0Kam9mZHluMVhDc2Q5MUdEZEpzWVBpSXZDRlpRMS9lVzRLVEdVZ0VhbG1uaUppTDhZNW13WlMxQkJlWXByNm5adQ0KTWoyR3A3eGRyYy9ncEJTbWZVSXZxS0t6c1lTZlVqOWZxaUwyenp0L08yTWRRRHZxak9ZUkZ3RWZVY0w2ejU3aw0KMktMcG1vM2tRWFU2Zlh6U0NWdjJMK25uNHJNNG8xbWJrMUxjd0NoK2ZaZ3MyUHp5dG9uNGMvMEMrVTlxald0Uw0KV01FbDZBTHhBZ01CQUFFQ2dnRUFDa3pTYXRsL0EwcjFxdWZLV2FqV1hUTUN5b1FsekxzK1ViZlBnRGRsK05kVA0KdVhPWFhDY21jVURSSGpBenhubG9UVHVpUnJ0cG5TanE2U2pTZzRCWHhkeVBuVlJwQWNTM2RERUJkS3hwTDBWSg0KK0ZaMXBVYXNyendWQW5HbjI3Y2NveGl6a21mL3pYVXQwVk02bTF4Q1I0S3QvWGpYTCtYWHQ5UEZWdGk4aUZLZw0KWGRHUGlIV1pZZkM2S3M0WUNvMnZTVmRzUUZoYlRHYlpybWJYZCt3d1IrMUZON3pZYXV4VUxXT3NWWE9aVHBEQg0KY05qZUI3TVp3cDYrRTNFLzJsdjNya3V6eVdKYkZGR0s2MmE2c05aZHZYU3RZMkpzbG5FTmFtN1RBcEp4ZGdrSg0KN0pBSVF5cHFyM3p4Um9xQ1ByNkRZQ3FIZWZKYUs0S2dXME9JdnVCQzRRS0JnUUR5SDM2cW1Da2YrVzlyaGo1NQ0KckwzZm92OWxlZVBYWVNvcXRpZVNrZGpIVDhadUVIVzVjZ3JJQUd3Z0Y4ZThVM3ZkNG1nNFE2aXJBN2VQd1FPVA0KS1Y3emZ1NmkwTVdHOHZ4NkkyVjNjUXJmOFo4M3lFRE1ncTY3aUZmdHFNRDdFWGpKa0RneWRCRTQyT2hPY0x2MQ0KWXdIU3pSMGtGN3lnbkZNL3hrSkxjcWZZalFLQmdRQ1dvM252S0NjU1liVUtjZExzcXhESW1QSS9UQWxZY2RXdw0KQ3BLNXVEUXpabTVsK1NJakJsOUtiNlpSZk9jbDNwVTRBOGRUbVF2bThwS1hzeWZYV2NYOVFVQ1I1dWgrcXk1Lw0KWG52UFVTdGR4bW5rMU9pQ2NkaHJTa2MyTTJIb0cxeEdDd2k5Q09jK3BVZHhHUE5pRE0waGt2bnUxSEh6aW0zVQ0KeDJ1QklmWFU5UUtCZ1FEaXJ4WDZSZ2VLeGcvSkRhQ0ViblErWXU3V1pPNHFBZkJtbUxBb0M2QjN5bnF2SlgzeQ0KcDVEc2UyakFDME9YVUZvUi9SMHlRRFkwRm9EUGVCZ091WmNLUmZiS1BNZ1Nkb0JuSWFpbjBSQXJacDU0cldYdA0Ka3hSZ3cxLy9SQldaZWx3cDZucVMwaFFsc3Y2Y0lmUDM1RUFheXFyVDFkMW1TYld2YWNFN3ZoYmpLUUtCZ0M0Yg0KTFNnSkZ5Um1LWDVmNWxvdjVid3dLLzA1cmFhWGVQc2YwVmJzelhWcUJhSktoYXRJdVFQVWRvaDhmVmMyOEY4cg0Kc09laWNXVW5tN3k0eGhvQXpUdTlyQ0M4Rnk4bC85NVdNZmo3ZEJXSXRFS284OTF4TVBkdHphd0dRQkpGeFpGZQ0Kc1RjQ3NaeVlBK3pXNFMrQ2tZcVVMTkZ2enN6bThzVHNvTGZ1aUFxOUFvR0JBTDRzTnNFbVZRRmkvK1pvSHpWYg0KNnhLenNCd3JneXlpa21xMzV6clpNb0NDRUlNSHRDbFV6dzgrRitnOFN0Qi9vK3psWFVkQm56K0J4YjhMeWhrRQ0KVlExUUFYdXlDM0ZuN29Nb2JyUUxmcllHLzg5OThJbEswcm1DeXp6b28xSzg0QjJCOXNRaDdHbXdlOUkvUlo4NA0KNWNlb2Zad2tuN1UvMjhaaElUQnJGSDFzDQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tDQpCYWcgQXR0cmlidXRlcw0KICAgIGZyaWVuZGx5TmFtZTogaW5zdGFuY2UNCiAgICBsb2NhbEtleUlEOiA1NCA2OSA2RCA2NSAyMCAzMSAzNSAzNSAzNiAzMCAzOCAzNSAzOCAzMiAzNyAzOSAzMSAzNA0Kc3ViamVjdD0vQ049aW5zdGFuY2UNCmlzc3Vlcj0vQ049RWxhc3RpYyBDZXJ0aWZpY2F0ZSBUb29sIEF1dG9nZW5lcmF0ZWQgQ0ENCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJREl6Q0NBZ3VnQXdJQkFnSVZBS1c2cUY0UUY1NE5aK1pyV1lXcytKVzZ1V2w0TUEwR0NTcUdTSWIzRFFFQg0KQ3dVQU1EUXhNakF3QmdOVkJBTVRLVVZzWVhOMGFXTWdRMlZ5ZEdsbWFXTmhkR1VnVkc5dmJDQkJkWFJ2WjJWdQ0KWlhKaGRHVmtJRU5CTUI0WERURTVNRFF5TkRBMk1ETTBObG9YRFRJeU1EUXlNekEyTURNME5sb3dFekVSTUE4Rw0KQTFVRUF4TUlhVzV6ZEdGdVkyVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDTw0KZVJHWXNBYStGSlZ4YjdKRit3ZklVR1hnbXNNMVZNY2FYODhvUDNGZTEwcC9RcmZvay9nOXhZN3BzOUJoaVVnQg0KRTcrNC9IUGZ0OUZ0NHBiZmFWSmF5bDlweTJSS3AvN0FsNWV6endvL3JLU1BHUkhRNXUxb2lhOU9SZTdJdVhSSg0KVnJQRWl0OGVvbnlmam9mZHluMVhDc2Q5MUdEZEpzWVBpSXZDRlpRMS9lVzRLVEdVZ0VhbG1uaUppTDhZNW13Wg0KUzFCQmVZcHI2blp1TWoyR3A3eGRyYy9ncEJTbWZVSXZxS0t6c1lTZlVqOWZxaUwyenp0L08yTWRRRHZxak9ZUg0KRndFZlVjTDZ6NTdrMktMcG1vM2tRWFU2Zlh6U0NWdjJMK25uNHJNNG8xbWJrMUxjd0NoK2ZaZ3MyUHp5dG9uNA0KYy8wQytVOXFqV3RTV01FbDZBTHhBZ01CQUFHalRUQkxNQjBHQTFVZERnUVdCQlFuRlNQNmRPNmNwYjRab3FRYw0KN09MOWpZVmpTekFmQmdOVkhTTUVHREFXZ0JTN3hueFBUS3RUa3A0M0p1bTVnVXI1emp5ZXhUQUpCZ05WSFJNRQ0KQWpBQU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQW1SOUtYRzM0b0RJWnZpRnlpMFNhaHhzc0QrQldpRklGZQ0KVW5obGIrOTV0WHlZZFlpT1poUzVBUU5VWDBUTjRmRlpaTDVaYWl4bHNYd0t6K3Zkd2IrQ2RZVWRrNC9IUEJ1bg0KUXF5b2R5dGZDaG9FTkd1ZXErT01CNkd5b0pkc3lJRGZaNG8rS0xEUW9ITjMxY0U1MEM1R1hTUnN6SitVckk0eQ0KdXRueUpSU1JtMmswYzNvcGhWREFFbTkwSG5GWG5yb09nQTVaVWJYMW16d1NOcHJHeU15WGZtWmFGcjBrK1pkYQ0Kam1mS1BlMTFUb1grUjA0T290bVQ5QXFralJHdk9DSC9taU92YXh5V2NLbFNCeHE2ZTRaMDU3NmJsbXVGbEtncg0KcU1tWGhHS3Y0Ni8zdEJpUmMxeEhlemZrRFpKdEdjdUo4K01Ba0JVRktsdUM2ejdWUm1FMQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KQmFnIEF0dHJpYnV0ZXMNCiAgICBmcmllbmRseU5hbWU6IGNhDQogICAgMi4xNi44NDAuMS4xMTM4OTQuNzQ2ODc1LjEuMTogPFVuc3VwcG9ydGVkIHRhZyA2Pg0Kc3ViamVjdD0vQ049RWxhc3RpYyBDZXJ0aWZpY2F0ZSBUb29sIEF1dG9nZW5lcmF0ZWQgQ0ENCmlzc3Vlcj0vQ049RWxhc3RpYyBDZXJ0aWZpY2F0ZSBUb29sIEF1dG9nZW5lcmF0ZWQgQ0ENCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRFNqQ0NBaktnQXdJQkFnSVZBS2hMdFIxS09LZ3pMOWlPTWp2MGV4R0YrbGxGTUEwR0NTcUdTSWIzRFFFQg0KQ3dVQU1EUXhNakF3QmdOVkJBTVRLVVZzWVhOMGFXTWdRMlZ5ZEdsbWFXTmhkR1VnVkc5dmJDQkJkWFJ2WjJWdQ0KWlhKaGRHVmtJRU5CTUI0WERURTVNRFF5TkRBMk1ESXhNRm9YRFRJeU1EUXlNekEyTURJeE1Gb3dOREV5TURBRw0KQTFVRUF4TXBSV3hoYzNScFl5QkRaWEowYVdacFkyRjBaU0JVYjI5c0lFRjFkRzluWlc1bGNtRjBaV1FnUTBFdw0KZ2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2VSUUhZeEFCb011clc2aG1KcEp3ZQ0KK1l6Mk5GVVNBckx4NjF4ck9KYjFBN0pQZVdZelJyamZnWXlnVThYTldacHlTVEdIcjhjUFYrYnMxQ2tYeHh4UA0KMDA2TUNiT3RFVzU0bUhWMUxyaUhiMjFzTGdmenNadUtKN3c0N3djM25zZXRIOExsSFRQaEdSVXNScXk2Zm5IMQ0KTFFiQUc5Y3F0N1oyY0UxVkRJQVM2Rk5ubzdoQmxDRkl6SHlWVXl1a0RGQ1M5MUVqb2VyRXBwK2R4UmF6clZuTA0KbG5ONGV5SmZreC9IeXJlbytOQjU2U1o3Z0hyZmJHVTJ6KzlGdFJybGxTb09GejAvTDBFME0zdktRRlo5QVJ2ag0KNzdmWUFibXhsQS91YlpKZ2t2UWZWeHR5dUUwMld2NjA1ZjBHaHdCeTNncnE1M0pyOWRPdVZTQkRVY3V1UU5FcA0KQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJTN3hueFBUS3RUa3A0M0p1bTVnVXI1emp5ZXhUQWZCZ05WSFNNRQ0KR0RBV2dCUzd4bnhQVEt0VGtwNDNKdW01Z1VyNXpqeWV4VEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxRw0KU0liM0RRRUJDd1VBQTRJQkFRQlRYcE5BTTFvSVVOSFJMb3NqVTV3clQ2eHVPbDUxOTVZRnVTY2cvL3ZVUTZnQQ0KbXBmRDVGdGg0dVdQWW9MRE9ENy8vUnFaUk5zZXRyOTJHQnVnYWxIV21FNFNOdmpRTlFvdG9sM2pRS2p1QzVVdA0KUXZKcHkrbWNMMlBCKzV4MkFxdkV4c2FKR3BXd2FmUFBydnhDNVY5M0h1aHB1LzVKSkJzbktVc2VzcGZJdFhPSQ0KVHhtbWhVdWVzcm9jaWFURUIxSXF6RTNzTWptUzMrSk5QanhVTkJrdW85RHhIdGNVaDAyalBNcC90STkxbmVsYw0KdEh3MkVCYjdXZFVkMGJhazk2OFg2YTRWM29rZkJwMzQ3c1d4QzE1RTgwTWFSam9DOVphY0xSYzNraEw0V3NNeQ0KT0x4SWVKUnR0U0JFZ2hKSCs3UThJTks4cjhZazhEUFVNajFQeFBHOA0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ=="


---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: ted-namespace
  labels:
    app: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports:
  - name: http
    protocol: TCP
    port: 9200
    targetPort: 9200
  - name: transport
    protocol: TCP
    port: 9300
    targetPort: 9300
    
    
    
cluster.name: ${CLUSTER_NAME}

node.master: ${NODE_MASTER}
node.name: ${NODE_NAME}
node.data: ${NODE_DATA}
node.ingest: ${NODE_INGEST}

processors: ${PROCESSORS:1}
network.host: ${NETWORK_HOST}

path.data: /mnt/data
path.logs: /mnt/log
path.repo: ${REPO_LOCATIONS}

bootstrap.memory_lock: ${MEMORY_LOCK}

http.compression: true
#http.cors.enabled: ${HTTP_CORS_ENABLE}
#http.cors.allow-origin: ${HTTP_CORS_ALLOW_ORIGIN}
discovery.seed_hosts: ${DISCOVERY_SEED_HOSTS}
cluster.initial_master_nodes: ${CLUSTER_INITIAL_MASTER_NODES}

xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12
xpack.security.transport.ssl.verification_mode: none



#!/bin/bash

echo "Starting Elasticsearch ${ES_VERSION}"

BASE=/etc/elasticsearch

# Allow for memlock if enabled
if [ "${MEMORY_LOCK}" = "true" ]; then
    ulimit -l unlimited
    echo "unlimited memory_lock"
fi

# Set a random node name if not set
if [ -z "${NODE_NAME}" ]; then
    export NODE_NAME="$(uuidgen)"
fi

# Create a temporary folder for Elasticsearch ourselves
# ref: https://github.com/elastic/elasticsearch/pull/27659
export ES_TMPDIR="$(mktemp -d -t elasticsearch.XXXXXXXX)"

# Prevent "Text file busy" errors
sync

# remove x-pack-ml module
rm -rf /etc/elasticsearch/modules/x-pack/x-pack-ml
rm -rf /etc/elasticsearch/modules/x-pack-ml

# Run
export ES_JAVA_OPTS
export ES_EXTRA_ARGS="
  -Enode.name=${NODE_NAME} \
  -Ebootstrap.memory_lock=${MEMORY_LOCK} \
  -Ecluster.initial_master_nodes=${NODE_NAME} \
  -Ediscovery.seed_hosts=${NODE_NAME} \
  -Ecluster.name=${CLUSTER_NAME} \
  -Enode.master=${NODE_MASTER} \
  -Enode.data=${NODE_DATA} \
  -Enode.ingest=${NODE_INGEST} \
  -Enetwork.host=${NETWORK_HOST} \
  -Epath.repo=${REPO_LOCATIONS}"

echo "${ES_EXTRA_ARGS} ========="

if [[ $(whoami) == "root" ]]; then
    if [[ ! -d "/mnt/data/nodes/0" ]]; then
        echo "Changing ownership of /mnt folder"
        chown -R elasticsearch:elasticsearch /mnt
    fi
    sudo -u elasticsearch "$BASE"/bin/elasticsearch ${ES_EXTRA_ARGS}
    echo "here"
else
    # The container's first process is not running as 'root',
    # it does not have the rights to chown. However, we may
    # assume that it is being ran as 'elasticsearch', and that
    # the volumes already have the right permissions. This is
    # the case for Kubernetes, for example, when 'runAsUser: 1000'
    # and 'fsGroup:100' are defined in the pod's security context.
    "${BASE}"/bin/elasticsearch ${ES_EXTRA_ARGS}
fi
 
