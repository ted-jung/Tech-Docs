---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
  namespace: ted-namespace
data:
  CLUSTER_NAME: "ted-cluster"
  NODE_NAME: ""
  NODE_MASTER: "true"
  NODE_DATA: "true"
  NODE_DATA: "true"
  NODE_INGEST: "true"
  HTTP_ENABLE: "true"
  NETWORK_HOST: "_site_"
  NUMBER_OF_MASTERS: "1"
  MAX_LOCAL_STORAGE_NODES: "1"
  MEMORY_LOCK: "true"
  REPO_LOCATIONS: "/mnt/log"
  CLUSTER_INITIAL_MASTER_NODES: ""
  DISCOVERY_SEED_HOSTS: ""
  ES_JAVA_OPTS: "-Xms1g -Xmx1g"
  
  ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: ted-namespace
  labels:
    app: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      initContainers:
        - name: init-sysctl
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          securityContext:
            privileged: true
            capabilities:
              add:
                - IPC_LOCK
                - SYS_RESOURCE
          image: tedjung/elasticsearch7.3.1           # image by tedjung
          imagePullPolicy: Always
          ports:
          - containerPort: 9200
            name: http
            protocol: TCP
          - containerPort: 9300
            name: transport
            protocol: TCP
          envFrom:
          - configMapRef:
              name: elasticsearch-config


---
  apiVersion: "v1"
  kind: Secret
  metadata:
    name: kibana-secret
    namespace: ted-namespace
  type: Opaque
  data:
    elastic.crt: "sdfdsf"
    elastic.key: "sdfsdf"
    elastic.pem: "sdfsdf"


---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: ted-namespace
  labels:
    app: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports:
  - name: http
    protocol: TCP
    port: 9200
    targetPort: 9200
  - name: transport
    protocol: TCP
    port: 9300
    targetPort: 9300
    
    
    
cluster.name: ${CLUSTER_NAME}

node.master: ${NODE_MASTER}
node.name: ${NODE_NAME}
node.data: ${NODE_DATA}
node.ingest: ${NODE_INGEST}

processors: ${PROCESSORS:1}
network.host: ${NETWORK_HOST}

path.data: /mnt/data
path.logs: /mnt/log
path.repo: ${REPO_LOCATIONS}

bootstrap.memory_lock: ${MEMORY_LOCK}

http.compression: true
#http.cors.enabled: ${HTTP_CORS_ENABLE}
#http.cors.allow-origin: ${HTTP_CORS_ALLOW_ORIGIN}
discovery.seed_hosts: ${DISCOVERY_SEED_HOSTS}
cluster.initial_master_nodes: ${CLUSTER_INITIAL_MASTER_NODES}

xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12
xpack.security.transport.ssl.verification_mode: none



#!/bin/bash

echo "Starting Elasticsearch ${ES_VERSION}"

BASE=/etc/elasticsearch

# Allow for memlock if enabled
if [ "${MEMORY_LOCK}" = "true" ]; then
    ulimit -l unlimited
    echo "unlimited memory_lock"
fi

# Set a random node name if not set
if [ -z "${NODE_NAME}" ]; then
    export NODE_NAME="$(uuidgen)"
fi

# Create a temporary folder for Elasticsearch ourselves
# ref: https://github.com/elastic/elasticsearch/pull/27659
export ES_TMPDIR="$(mktemp -d -t elasticsearch.XXXXXXXX)"

# Prevent "Text file busy" errors
sync

# remove x-pack-ml module
rm -rf /etc/elasticsearch/modules/x-pack/x-pack-ml
rm -rf /etc/elasticsearch/modules/x-pack-ml

# Run
export ES_JAVA_OPTS
export ES_EXTRA_ARGS="
  -Enode.name=${NODE_NAME} \
  -Ebootstrap.memory_lock=${MEMORY_LOCK} \
  -Ecluster.initial_master_nodes=${NODE_NAME} \
  -Ediscovery.seed_hosts=${NODE_NAME} \
  -Ecluster.name=${CLUSTER_NAME} \
  -Enode.master=${NODE_MASTER} \
  -Enode.data=${NODE_DATA} \
  -Enode.ingest=${NODE_INGEST} \
  -Enetwork.host=${NETWORK_HOST} \
  -Epath.repo=${REPO_LOCATIONS}"

echo "${ES_EXTRA_ARGS} ========="

if [[ $(whoami) == "root" ]]; then
    if [[ ! -d "/mnt/data/nodes/0" ]]; then
        echo "Changing ownership of /mnt folder"
        chown -R elasticsearch:elasticsearch /mnt
    fi
    sudo -u elasticsearch "$BASE"/bin/elasticsearch ${ES_EXTRA_ARGS}
    echo "here"
else
    # The container's first process is not running as 'root',
    # it does not have the rights to chown. However, we may
    # assume that it is being ran as 'elasticsearch', and that
    # the volumes already have the right permissions. This is
    # the case for Kubernetes, for example, when 'runAsUser: 1000'
    # and 'fsGroup:100' are defined in the pod's security context.
    "${BASE}"/bin/elasticsearch ${ES_EXTRA_ARGS}
fi
 
